# -*- coding: utf-8 -*-
"""
๐ ุฃู ุฅูุฌุงุฒ โ ููุญุฉ ุชุญููู ุฅูุฌุงุฒ ุงูุทูุงุจ (Purple/White)
- ุงุฎุชูุงุฑ ุฃูุฑุงู Excel ูู ุงูุดุฑูุท ุงูุฌุงูุจู
- ุฑุจุท ุณุฌู ุงูููุฏ (ุฑูู ุดุฎุตู + ุตู + ุดุนุจุฉ) ุจุชุทุจูุน ุงูุงุณู
- ensure_uid: uid ููุญูุฏ + ุฅุฒุงูุฉ ุงูุชูุฑุงุฑุงุช
- Pivot: ูู ุทุงูุจ ุตู ูุงุญุฏ
- ุฑุณูู ุนุงูุฉ + ูุฆุงุช + ููุงุฏ
- ุชูุตูุงุช ุชุดุบูููุฉ ูุฑูุน ูุณุจุฉ ุงูุฅูุฌุงุฒ (ุบูุฑ ุฃูุงุฏูููุฉ)
- ุชุตุฏูุฑ Excel ุดุงูู + PDF ูุฑุฏู ููู ุทุงูุจ ุฏุงุฎู ZIP
- ุญูุธ ุงูุฌุฏุงูู ูู session_state ูุซุจุงุช ุฃุฒุฑุงุฑ ุงูุชุตุฏูุฑ
- ููุฒุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู: ุชุญููู ุงูุฃููุงุทุ ูุงูุชูุตูุงุช ุงููุฎุตุตุฉ ุจุงุณุชุฎุฏุงู LLM
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO
import re, zipfile
from typing import Dict, List, Tuple, Optional
from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import Color
from reportlab.lib.units import mm
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph, Table, TableStyle, Spacer, SimpleDocTemplate, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_RIGHT
from reportlab.lib import colors
from reportlab.lib.units import inch

# --------------- ุฅุนุฏุงุฏ ุงูุตูุญุฉ ---------------
# ุฑุงุจุท ุดุนุงุฑ ุฅูุฌุงุฒ (ุงููุฎุทุท ุงูุจูุงูู ุงููููู)
INGAZ_ICON = "https://i.imgur.com/pasted_file_gkR2PR_image.png" 
st.set_page_config(page_title="ุฃู ุฅูุฌุงุฒ", page_icon=INGAZ_ICON, layout="wide")

# --------------- ุงูุซูุงุจุช ---------------
POSITIVE_STATUS = ["solved","yes","1","ุชู","ููุฌุฒ","โ","โ","ุตุญูุญ"]

STUDENT_RECOMMENDATIONS = {
    "๐ Platinum": "ูุซูู ุชููุฒู ุงููุณุชูุฑุ ููุฏ ุฃุธูุฑุช ุฅุจุฏุงุนูุง ูุงุฌุชูุงุฏูุง ููุญูุธูุง. ุงุณุชูุฑ ูู ุงุณุชุฎุฏุงู ูุธุงู ูุทุฑ ููุชุนููู ุจูุนุงููุฉุ ูุฃูุช ูููุฐุฌ ูุญุชุฐู ุจู.",
    "๐ฅ Gold": "ุฃุญุณูุช! ูุณุชูุงู ูุนูุณ ุงูุชุฒุงููุง ุฑุงุฆุนูุงุ ูุซู ุฃูู ุจูุชุงุจุนุฉ ุงูุฌูุฏ ุณุชูุชูู ููุณุชูู ุฃุนูู. ุงุณุชูุฑ ูู ุชูุนูู ูุธุงู ูุทุฑ ุฏุงุฎู ุงูุตู.",
    "๐ฅ Silver": "ุนููู ุฌูุฏ ููุณุชุญู ุงูุชูุฏูุฑุ ููุน ูุฒูุฏ ูู ุงูููุงุฑุณุฉ ูุงูุชูุงุนู ูุน ูุธุงู ูุทุฑ ุณุชุตู ุฅูู ูุณุชููุงุช ุฃุฑูุน. ูุญู ูุฎูุฑูู ุจู.",
    "๐ฅ Bronze": "ููุฏ ุฃุธูุฑุช ุฌูุฏูุง ูุดููุฑูุงุ ููุดุฌุนู ุนูู ุจุฐู ุงููุฒูุฏ ูู ุงูุนุทุงุก. ุจุงุณุชุฎุฏุงู ูุธุงู ูุทุฑ ุจุดูู ุฃุนูู ุณุชุชุทูุฑ ูุฏุฑุงุชู ุจุดูู ุฃูุจุฑ.",
    "๐ง Needs Improvement": "ูุฑู ูุฏูู ุฅููุงููุงุช ูุงุนุฏุฉุ ููู ุชุญุชุงุฌ ููุฒูุฏ ูู ุงูุงูุชุฒุงู ุจุงุณุชุฎุฏุงู ูุธุงู ูุทุฑ ููุชุนููู. ููุตูู ุจุงููุซุงุจุฑุฉ ูุงููุดุงุฑูุฉ ุงููุดุทุฉุ ููุญู ุจุฌุงูุจู ูุชุชูุฏู.",
    "๐ซ Not Utilizing System": "ูู ูุธูุฑ ุจุนุฏ ุงุณุชูุงุฏุฉ ูุงููุฉ ูู ูุธุงู ูุทุฑ ููุชุนูููุ ููุฏุนูู ุฅูู ุชูุนูู ุงููุธุงู ุจุดูู ุฃูุจุฑ ูุชุญููู ุงููุฌุงุญ. ูุญู ูุซู ุฃู ูุฏูู ุงููุฏุฑุฉ ุนูู ุงูุชุบููุฑ ูุงูุชููุฒ."
}

# --------------- ููุฏ ุงูููุชุฑ (Footer) ---------------
FOOTER_MARKDOWN = """
<style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #f0f2f6; /* ููู ุฎูููุฉ ูุงุชุญ */
        color: #800020; /* ููู ุงููุต ุนูุงุจู */
        text-align: center;
        padding: 10px 0;
        font-size: 14px;
        border-top: 1px solid #800020; /* ุฎุท ุนูุงุจู ูุงุตู */
    }
    .footer a {
        color: #800020; /* ููู ุงูุฑูุงุจุท ุนูุงุจู */
        text-decoration: none;
    }
</style>
<div class="footer">
    <p>
        <strong>ุฑุคูุชูุง: ูุชุนูู ุฑูุงุฏู ูุชูููุฉ ูุณุชุฏุงูุฉ</strong><br>
        ุฌููุน ุงูุญููู ูุญููุธุฉ ยฉ ูุฏุฑุณุฉ ุนุซูุงู ุจู ุนูุงู ุงููููุฐุฌูุฉ<br>
        ุชุทููุฑ ู ุชูููุฐ: ููุณู ุงููุดุงุฑูุน ุงูุฅููุชุฑูููุฉ: ุณุญุฑ ุนุซูุงู<br>
        ููุชูุงุตู: <a href="mailto:S.mahgoub0101@education.qa">S.mahgoub0101@education.qa</a>
    </p>
</div>
"""
# --------------- ููุงูุฉ ููุฏ ุงูููุชุฑ ---------------

# --------------- ููุฏ ุฑุฃุณ ุงูุตูุญุฉ (Header) ---------------
def display_header():
    
    # ุฑูุงุจุท ุงูุดุนุงุฑุงุช
    MINISTRY_LOGO = "https://i.imgur.com/jFzu8As.jpeg"
    QATAR_SYSTEM_LOGO = "https://i.imgur.com/AtRkvQY.jpeg"
    
    # ุชูุณูู HTML/CSS ูุชุฑุชูุจ ุงูุดุนุงุฑุงุช ูุงูุนููุงู
    header_html = f"""
    <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px 0; border-bottom: 2px solid #800020;">
        
        <!-- ุงููุณุงุฑ: ุดุนุงุฑ ุงููุฒุงุฑุฉ ูุดุนุงุฑ ุงููุธุงู -->
        <div style="display: flex; align-items: center; gap: 15px;">
            <img src="{MINISTRY_LOGO}" style="height: 60px; object-fit: contain;">
            <img src="{QATAR_SYSTEM_LOGO}" style="height: 60px; object-fit: contain;">
        </div>
        
        <!-- ุงูููุชุตู: ุงูุนููุงู ุงูุฑุฆูุณู (ุฃู ุฅูุฌุงุฒ) -->
        <div style="text-align: center; flex-grow: 1;">
            <h1 style="color: #800020; margin: 0; font-size: 32px;">
                ุฃู ุฅูุฌุงุฒ - ููุญุฉ ุชุญููู ุฅูุฌุงุฒ ุงูุทูุงุจ ุงูุฐููุฉ
            </h1>
            <p style="color: #555; margin: 5px 0 0 0; font-size: 16px;">
                ุฃุฏุงุฉ ุชุญููููุฉ ุชุนุชูุฏ ุนูู ุงูุชุญููู ุงูุฅุญุตุงุฆู ูุงูุชูุตูุงุช ุงูุซุงุจุชุฉ ุงููุฎุตุตุฉ ูุฑูุน ูุณุจุฉ ุงูุฅูุฌุงุฒ ุงูุฃูุงุฏููู.
            </p>
        </div>
        
        <!-- ุงููููู: ูุณุงุญุฉ ูุงุฑุบุฉ ุฃู ุดุนุงุฑ ุขุฎุฑ ุฅุฐุง ูุฒู ุงูุฃูุฑ -->
        <div style="width: 135px;"></div>
    </div>
    """
    st.markdown(header_html, unsafe_allow_html=True)
# --------------- ููุงูุฉ ููุฏ ุฑุฃุณ ุงูุตูุญุฉ ---------------

# --------------- ุฃุฏูุงุช ูุณุงุนุฏุฉ ---------------
def _strip_invisible_and_diacritics(s: str) -> str:
    """ูุฒูู ุงูุฃุญุฑู ุบูุฑ ุงููุฑุฆูุฉ ูุนูุงูุงุช ุงูุชุดููู ูู ุงููุต."""
    if not isinstance(s, str):
        return s
    s = re.sub(r'[\u200b-\u200f\u202a-\u202e\u2066-\u2069]', '', s)
    s = re.sub(r'[\u064b-\u065e]', '', s)
    return s.strip()

@st.cache_data
def _load_teachers_df(file) -> Optional[pd.DataFrame]:
    """ุชุญููู ููู ุงููุนูููู ูุชูุญูุฏ ุฃุณูุงุก ุงูุฃุนูุฏุฉ."""
    if file is None:
        return None
    
    try:
        if file.name.endswith('.csv'):
            df = pd.read_csv(file)
        else:
            df = pd.read_excel(file)
            
        # ูุญุงููุฉ ุชูุญูุฏ ุฃุณูุงุก ุงูุฃุนูุฏุฉ
        cols = [_strip_invisible_and_diacritics(str(c)) for c in df.columns]
        df.columns = cols
        
        # ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ ุงูุฃุณุงุณูุฉ
        col_map = {}
        for c in cols:
            if 'ุดุนุจุฉ' in c or 'ุตู' in c or 'ูุตู' in c:
                col_map['class_section'] = c
            elif 'ูุนูู' in c or 'ูุฏุฑุณ' in c:
                col_map['teacher_name'] = c
            elif 'ุงูููู' in c or 'ุจุฑูุฏ' in c:
                col_map['teacher_email'] = c
        
        if len(col_map) < 3:
            st.error("ููู ุงููุนูููู ูุฌุจ ุฃู ูุญุชูู ุนูู ุฃุนูุฏุฉ ููุดุนุจุฉุ ุงุณู ุงููุนููุ ูุงูุจุฑูุฏ ุงูุฅููุชุฑููู.")
            return None
        
        df = df[list(col_map.values())]
        df.columns = ['class_section', 'teacher_name', 'teacher_email']
        
        df['class_section'] = df['class_section'].astype(str).apply(_strip_invisible_and_diacritics)
        df['teacher_email'] = df['teacher_email'].astype(str).str.lower().apply(_strip_invisible_and_diacritics)
        
        return df
    except Exception as e:
        st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุฑุงุกุฉ ููู ุงููุนูููู: {e}")
        return None

@st.cache_data
def process_excel_file(file, filename: str, start_row_students: int, selected_sheets: List[str]) -> List[Dict]:
    """ูุนุงูุฌุฉ ููู Excel ูุงุญุฏ ูุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงูุทูุงุจ."""
    try:
        xls = pd.ExcelFile(file)
        data_rows = []
        
        for sheet_name in selected_sheets:
            # ูุฑุงุกุฉ ุงูุจูุงูุงุช ูุน ุชุฎุทู ุงูุตููู ุงูุนูููุฉ
            df = xls.parse(sheet_name, header=None, skiprows=start_row_students - 1)
            
            # ุชุญุฏูุฏ ุฃุนูุฏุฉ ุงูู UID ูุงูุงุณู ูุงูุตู ูุงูุดุนุจุฉ (ุงูุชุฑุงุถูุงู ุฃูู 4 ุฃุนูุฏุฉ)
            if df.shape[1] < 4: continue
            
            df = df.iloc[:, :4].copy()
            df.columns = ['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ']
            
            # ุชุญุฏูุฏ ุฃุนูุฏุฉ ุงูุชููููุงุช (ุจุฏุกุงู ูู ุงูุนููุฏ ุงูุฎุงูุณ)
            assessment_cols = xls.parse(sheet_name, header=None, skiprows=start_row_students - 2, nrows=1).iloc[0, 4:].tolist()
            assessment_data = xls.parse(sheet_name, header=None, skiprows=start_row_students - 1).iloc[:, 4:]
            assessment_data.columns = assessment_cols
            
            # ุฏูุฌ ุจูุงูุงุช ุงูุทุงูุจ ูุน ุจูุงูุงุช ุงูุชูููู
            df = pd.concat([df, assessment_data], axis=1)
            
            # ุชุญููู ุงูุตููู ุฅูู ูุงุฆูุฉ ููุงููุณ
            for _, row in df.iterrows():
                row_dict = row.to_dict()
                row_dict['Source_File'] = filename
                row_dict['Source_Sheet'] = sheet_name
                data_rows.append(row_dict)
                
        return data_rows
    except Exception as e:
        st.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูููู {filename} ูุงููุฑูุฉ {sheet_name}: {e}")
        return []

@st.cache_data
def ensure_uid(df: pd.DataFrame) -> pd.DataFrame:
    """ุชูุญูุฏ ุงูู UID ูุฅุฒุงูุฉ ุงูุชูุฑุงุฑุงุช."""
    if df.empty:
        return df
    
    # ุชูุญูุฏ ุงูู UID ูุงูุงุณู
    df['uid'] = df['uid'].astype(str).apply(_strip_invisible_and_diacritics)
    df['ุงุณู ุงูุทุงูุจ'] = df['ุงุณู ุงูุทุงูุจ'].astype(str).apply(_strip_invisible_and_diacritics)
    df['ุงูุตู'] = df['ุงูุตู'].astype(str).apply(_strip_invisible_and_diacritics)
    df['ุงูุดุนุจุฉ'] = df['ุงูุดุนุจุฉ'].astype(str).apply(_strip_invisible_and_diacritics)
    
    # ุฅุฒุงูุฉ ุงูุตููู ุงูููุฑุฑุฉ ุจูุงุกู ุนูู UID
    df = df.drop_duplicates(subset=['uid'], keep='first')
    
    return df

@st.cache_data
def build_summary_pivot(raw_df: pd.DataFrame, thresholds: Dict[str, float]) -> Tuple[pd.DataFrame, List[str]]:
    """ุจูุงุก ุงูููุฎุต ุงููุญูุฑู ูุฅุถุงูุฉ ุงูุชุตูููุงุช ูุงูุชูุตูุงุช."""
    if raw_df.empty:
        return pd.DataFrame(), []

    # 1. ุชุญุฏูุฏ ุฃุนูุฏุฉ ุงูุชููููุงุช
    assessment_cols = [col for col in raw_df.columns if col not in ['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ', 'Source_File', 'Source_Sheet']]
    
    # 2. ุชุญููู ุงูุจูุงูุงุช ุฅูู ุชูุณูู ุทููู (Long Format)
    long_df = raw_df.melt(
        id_vars=['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ'],
        value_vars=assessment_cols,
        var_name='assessment_name',
        value_name='status'
    ).dropna(subset=['status'])

    # 3. ุงุณุชุฎุฑุงุฌ ุงุณู ุงููุงุฏุฉ (ููุชุฑุถ ุฃู ุงุณู ุงููุงุฏุฉ ูู ุฃูู ูููุฉ)
    long_df['subject'] = long_df['assessment_name'].apply(lambda x: x.split(' ')[0] if isinstance(x, str) else 'ุบูุฑ ูุญุฏุฏ')
    
    # 4. ุชุญุฏูุฏ ุญุงูุฉ ุงูุฅูุฌุงุฒ (Solved/Total)
    long_df['solved'] = long_df['status'].astype(str).apply(lambda x: 1 if _strip_invisible_and_diacritics(x).lower() in POSITIVE_STATUS else 0)
    long_df['total'] = 1

    # 5. ุจูุงุก ุงูุฌุฏูู ุงููุญูุฑู (Pivot Table)
    piv = pd.pivot_table(
        long_df,
        index=['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ'],
        columns='subject',
        values=['solved', 'total'],
        aggfunc='sum',
        fill_value=0
    ).reset_index()

    # 6. ุฅุตูุงุญ ูุดููุฉ ุชุณููุฉ ุงูุฃุนูุฏุฉ ุจุนุฏ pivot_table (ุฅุตูุงุญ KeyError: 'uid')
    new_columns = []
    for col in piv.columns:
        if col[0] in ['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ']:
            new_columns.append(col[0])
        else:
            new_columns.append(f"{col[1]}_{col[0]}")
    piv.columns = new_columns
    
    # 7. ุญุณุงุจ ุงูุฅุฌูุงูู ุงูููู
    subjects = [col.split('_')[0] for col in piv.columns if col.endswith('_total')]
    
    piv['Overall_solved'] = piv[[f"{s}_solved" for s in subjects]].sum(axis=1)
    piv['Overall_total'] = piv[[f"{s}_total" for s in subjects]].sum(axis=1)
    
    # 8. ุญุณุงุจ ูุณุจุฉ ุงูุฅูุฌุงุฒ
    piv['ูุณุจุฉ ุงูุฅูุฌุงุฒ %'] = (piv['Overall_solved'] / piv['Overall_total'] * 100).round(2).fillna(0)
    
    # 9. ุงูุชุตููู (Categorization)
    def cat(x):
        if x == 0:
            return "๐ซ Not Utilizing System"
        elif x > thresholds["Platinum"]:
            return "๐ Platinum"
        elif x > thresholds["Gold"]:
            return "๐ฅ Gold"
        elif x > thresholds["Silver"]:
            return "๐ฅ Silver"
        elif x > thresholds["Bronze"]:
            return "๐ฅ Bronze"
        else:
            return "๐ง Needs Improvement"
            
    piv['ุงููุฆุฉ'] = piv['ูุณุจุฉ ุงูุฅูุฌุงุฒ %'].apply(cat)
    
    # 10. ุฅุถุงูุฉ ุงูุชูุตูุฉ ุงูุซุงุจุชุฉ
    piv['ุชูุตูุฉ ุงูุทุงูุจ'] = piv['ุงููุฆุฉ'].apply(lambda x: STUDENT_RECOMMENDATIONS.get(x, "ูุง ุชูุฌุฏ ุชูุตูุฉ ููุฐุง ุงูุชุตููู."))
    
    # 11. ุฅุนุงุฏุฉ ุชุฑุชูุจ ุงูุฃุนูุฏุฉ
    cols_order = ['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ', 'ูุณุจุฉ ุงูุฅูุฌุงุฒ %', 'ุงููุฆุฉ', 'ุชูุตูุฉ ุงูุทุงูุจ'] + [col for col in piv.columns if col not in ['uid', 'ุงุณู ุงูุทุงูุจ', 'ุงูุตู', 'ุงูุดุนุจุฉ', 'ูุณุจุฉ ุงูุฅูุฌุงุฒ %', 'ุงููุฆุฉ', 'ุชูุตูุฉ ุงูุทุงูุจ']]
    
    return piv[cols_order], subjects

@st.cache_data
def analyze_subject_patterns(summary_df: pd.DataFrame, subject: str) -> str:
    """ุชุญููู ููุท ุงูุฃุฏุงุก ูู ูุงุฏุฉ ูุนููุฉ ูุชูุฏูู ุชูุตูุฉ ุซุงุจุชุฉ."""
    
    solved_col = f"{subject}_solved"
    total_col = f"{subject}_total"
    
    if solved_col not in summary_df.columns or total_col not in summary_df.columns:
        return "ูุง ุชูุฌุฏ ุจูุงูุงุช ูุงููุฉ ููุฐู ุงููุงุฏุฉ."
        
    total_students = summary_df.shape[0]
    total_assessments = summary_df[total_col].sum()
    avg_solved = summary_df[solved_col].mean()
    
    # ูุนุงููุฑ ุจุณูุทุฉ ููุชูุตูุฉ (ุซุงุจุชุฉ)
    if total_assessments == 0:
        return f"ุชูุตูุฉ ุงููุงุฏุฉ {subject}: ูู ูุชู ุฅุฏุฎุงู ุฃู ุชููููุงุช ููุฐู ุงููุงุฏุฉ. ูุฑุฌู ุงูุชุฃูุฏ ูู ุฅุฏุฎุงู ุงูุจูุงูุงุช."
    
    avg_completion = (summary_df[solved_col].sum() / total_assessments) * 100
    
    if avg_completion >= 80:
        return f"ุชูุตูุฉ ุงููุงุฏุฉ {subject}: ุฃุฏุงุก ููุชุงุฒ! ูุชูุณุท ุงูุฅูุฌุงุฒ {avg_completion:.2f}%. ูุฑุฌู ุงูุชุฑููุฒ ุนูู ุงูุทูุงุจ ุงูุฐูู ูู ููุฌุฒูุง ุจุนุฏ ูุถูุงู ุงุณุชูุฑุงุฑ ุงูุชููุฒ."
    elif avg_completion >= 50:
        return f"ุชูุตูุฉ ุงููุงุฏุฉ {subject}: ุฃุฏุงุก ุฌูุฏ. ูุชูุณุท ุงูุฅูุฌุงุฒ {avg_completion:.2f}%. ููุถู ูุฑุงุฌุนุฉ ุงูุชููููุงุช ุงูุฃูู ุฅูุฌุงุฒุงู ูุชูุฏูู ุฏุนู ุฅุถุงูู ููุทูุงุจ ูู ุงููุฆุฉ ุงูุจุฑููุฒูุฉ."
    else:
        return f"ุชูุตูุฉ ุงููุงุฏุฉ {subject}: ูุญุชุงุฌ ุฅูู ุชุทููุฑ. ูุชูุณุท ุงูุฅูุฌุงุฒ {avg_completion:.2f}%. ูุฑุฌู ูุฑุงุฌุนุฉ ุทุฑููุฉ ุชูุฏูู ุงูุชููููุงุช ุฃู ุงููุญุชููุ ูุงูุชุฑููุฒ ุนูู ุงูุทูุงุจ ุบูุฑ ุงููุงุนููู."

# ----------------------------------------------------------------------
# ุฏูุงู ุงูุฑุณูู ุงูุจูุงููุฉ ุงูุชูุงุนููุฉ (Plotly)
# ----------------------------------------------------------------------
def create_subject_performance_chart(summary_df: pd.DataFrame, subjects: List[str]):
    """ุฑุณู ุจูุงูู ูุฃุฏุงุก ุงูุทูุงุจ ุญุณุจ ุงููุงุฏุฉ (ูุชูุณุท ุงูุฅูุฌุงุฒ)."""
    
    # ุญุณุงุจ ูุชูุณุท ุงูุฅูุฌุงุฒ ููู ูุงุฏุฉ
    subject_avg = []
    for subj in subjects:
        total_solved = summary_df.get(f"{subj}_solved", pd.Series([0])).sum()
        total_total = summary_df.get(f"{subj}_total", pd.Series([0])).sum()
        avg_completion = (total_solved / total_total * 100) if total_total > 0 else 0
        subject_avg.append({"ุงููุงุฏุฉ": subj, "ูุชูุณุท ุงูุฅูุฌุงุฒ %": avg_completion})
        
    df_avg = pd.DataFrame(subject_avg)
    
    fig = px.bar(
        df_avg,
        x="ุงููุงุฏุฉ",
        y="ูุชูุณุท ุงูุฅูุฌุงุฒ %",
        title="ูุชูุณุท ูุณุจุฉ ุฅูุฌุงุฒ ุงูุทูุงุจ ุญุณุจ ุงููุงุฏุฉ",
        color="ูุชูุณุท ุงูุฅูุฌุงุฒ %",
        color_continuous_scale=px.colors.sequential.Burg, # ุงุณุชุฎุฏุงู ุชุฏุฑุฌ ูููู ูุฑูุจ ูู ุงูุนูุงุจู
        text="ูุชูุณุท ุงูุฅูุฌุงุฒ %"
    )
    
    fig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
    fig.update_layout(
        uniformtext_minsize=8, 
        uniformtext_mode='hide',
        xaxis_title="ุงููุงุฏุฉ",
        yaxis_title="ูุชูุณุท ูุณุจุฉ ุงูุฅูุฌุงุฒ (%)",
        coloraxis_showscale=False,
        font=dict(family="Arial, sans-serif")
    )
    
    return fig

def create_class_section_performance_chart(summary_df: pd.DataFrame):
    """ุฑุณู ุจูุงูู ูุฃุฏุงุก ุงูุดุนุจ (ูุชูุณุท ุงูุฅูุฌุงุฒ ุงูููู)."""
    
    # ุญุณุงุจ ูุชูุณุท ุงูุฅูุฌุงุฒ ููู ุดุนุจุฉ
    class_avg = summary_df.groupby(["ุงูุตู", "ุงูุดุนุจุฉ"]).agg(
        total_solved=('Overall_solved', 'sum'),
        total_total=('Overall_total', 'sum')
    ).reset_index()
    
    class_avg['ูุณุจุฉ ุงูุฅูุฌุงุฒ %'] = (class_avg['total_solved'] / class_avg['total_total'] * 100).round(2).fillna(0)
    class_avg['ุงูุดุนุจุฉ'] = class_avg['ุงูุตู'].astype(str) + ' ' + class_avg['ุงูุดุนุจุฉ'].astype(str)
    
    fig = px.bar(
        class_avg,
        x="ุงูุดุนุจุฉ",
        y="ูุณุจุฉ ุงูุฅูุฌุงุฒ %",
        title="ูุชูุณุท ูุณุจุฉ ุงูุฅูุฌุงุฒ ุงูููู ุญุณุจ ุงูุดุนุจุฉ",
        color="ูุณุจุฉ ุงูุฅูุฌุงุฒ %",
        color_continuous_scale=px.colors.sequential.Burg,
        text="ูุณุจุฉ ุงูุฅูุฌุงุฒ %"
    )
    
    fig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
    fig.update_layout(
        uniformtext_minsize=8, 
        uniformtext_mode='hide',
        xaxis_title="ุงูุตู ูุงูุดุนุจุฉ",
        yaxis_title="ูุชูุณุท ูุณุจุฉ ุงูุฅูุฌุงุฒ ุงูููู (%)",
        coloraxis_showscale=False,
        font=dict(family="Arial, sans-serif")
    )
    
    return fig

def to_excel_bytes(dfs: Dict[str, pd.DataFrame]) -> BytesIO:
    """ุชุญููู ูุงููุณ ูู DataFrames ุฅูู ููู Excel ูู ุงูุฐุงูุฑุฉ."""
    mem = BytesIO()
    with pd.ExcelWriter(mem, engine="openpyxl") as writer:
        for sheet_name, df in dfs.items():
            df.to_excel(writer, sheet_name=sheet_name, index=False)
    mem.seek(0)
    return mem

# ----------------------------------------------------------------------
# ุฏุงูุฉ ุฅูุดุงุก ุชูุฑูุฑ ุงูุทุงูุจ ุงููุฑุฏู (PDF) - ุชุตููู ููุงุฆู
# ----------------------------------------------------------------------
def create_student_report_pdf(student_data: pd.Series, raw_df: pd.DataFrame, school_info: dict, custom_recommendation: str = "") -> BytesIO:
    """ุชูุดุฆ ุชูุฑูุฑ PDF ูุฑุฏู ููุทุงูุจ ุจูุงุกู ุนูู ุงููููุฐุฌ ุงููุฑูู."""
    
    # ูุฌุจ ุงุณุชูุฑุงุฏ ูุฐู ุงูููุชุจุงุช ุฏุงุฎู ุงูุฏุงูุฉ ูุถูุงู ุนูููุง ุจุดูู ุตุญูุญ
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.enums import TA_RIGHT
    from reportlab.lib import colors
    from reportlab.lib.units import inch, mm
    
    mem = BytesIO()
    
    # ุฅุนุฏุงุฏุงุช ุงูุชูุซูู
    doc = SimpleDocTemplate(
        mem,
        pagesize=A4,
        rightMargin=10*mm, leftMargin=10*mm,
        topMargin=10*mm, bottomMargin=10*mm
    )
    
    styles = getSampleStyleSheet()
    # ุฃููุงุท ูุฎุตุตุฉ ููุบุฉ ุงูุนุฑุจูุฉ (ูุญุงุฐุงุฉ ูููููู)
    styles.add(ParagraphStyle(name='RightAlign', alignment=TA_RIGHT, fontName='Helvetica', fontSize=12))
    styles.add(ParagraphStyle(name='Heading1Right', alignment=TA_RIGHT, fontName='Helvetica-Bold', fontSize=18))
    styles.add(ParagraphStyle(name='Heading2Right', alignment=TA_RIGHT, fontName='Helvetica-Bold', fontSize=14))
    styles.add(ParagraphStyle(name='SmallRight', alignment=TA_RIGHT, fontName='Helvetica', fontSize=10))
    
    # ุจูุงูุงุช ุงููุฏุฑุณุฉ
    school_name = school_info.get("School_Name", "ุงููุฏุฑุณุฉ")
    coordinator = school_info.get("Coordinator", "N/A")
    academic_deputy = school_info.get("Academic_Deputy", "N/A")
    administrative_deputy = school_info.get("Administrative_Deputy", "N/A")
    principal = school_info.get("Principal", "N/A")
    
    # ูุญุชูู ุงูุชูุฑูุฑ
    elements = []
    
    # 1. ุฑุฃุณ ุงูุชูุฑูุฑ ูุงูุดุนุงุฑุงุช (ูุญุงูุงุฉ)
    MINISTRY_LOGO = "https://i.imgur.com/jFzu8As.jpeg"
    QATAR_SYSTEM_LOGO = "https://i.imgur.com/AtRkvQY.jpeg"
    
    # ุฅูุดุงุก ุฌุฏูู ูุฑุฃุณ ุงูุตูุญุฉ (ุงูุดุนุงุฑุงุช ูุงูุนููุงู)
    header_data = [
        [
            Image(MINISTRY_LOGO, width=40*mm, height=15*mm),
            Paragraph(f"<b>{school_name}</b>", styles['Heading2Right']),
            Image(QATAR_SYSTEM_LOGO, width=40*mm, height=15*mm)
        ],
        [
            Paragraph("ุงูุนุงู ุงูุฃูุงุฏููู 2025-2026", styles['SmallRight']),
            Paragraph("ุชูุฑูุฑ ุฃุฏุงุก ุงูุทุงูุจ ุนูู ูุธุงู ูุทุฑ ููุชุนููู", styles['Heading1Right']),
            Paragraph("", styles['SmallRight'])
        ]
    ]
    
    header_table = Table(header_data, colWidths=[50*mm, 100*mm, 50*mm])
    header_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
        ('SPAN', (1,1), (2,1)), # ุฏูุฌ ุฎูุงูุง ุงูุนููุงู
        ('BOTTOMPADDING', (0,0), (-1,-1), 5*mm),
    ]))
    elements.append(header_table)
    elements.append(Spacer(1, 0.5 * inch))
    
    # 2. ูุนูููุงุช ุงูุทุงูุจ
    elements.append(Paragraph("<b>ูุนูููุงุช ุงูุทุงูุจ:</b>", styles['Heading2Right']))
    elements.append(Spacer(1, 0.1 * inch))
    
    student_info_data = [
        [
            Paragraph(f"<b>:ุจูุงุทูุง ูุณุง</b> {student_data['ุงุณู ุงูุทุงูุจ']}", styles['RightAlign']),
            Paragraph(f"<b>:ูุตูุง</b> {student_data['ุงูุตู']}", styles['RightAlign']),
            Paragraph(f"<b>:ุฉุจุนุดูุง</b> {student_data['ุงูุดุนุจุฉ']}", styles['RightAlign']),
        ]
    ]
    student_info_table = Table(student_info_data, colWidths=[doc.width/3]*3)
    student_info_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'RIGHT'),
        ('BOTTOMPADDING', (0,0), (-1,-1), 5*mm),
    ]))
    elements.append(student_info_table)
    elements.append(Spacer(1, 0.2 * inch))
    
    # 3. ุฌุฏูู ุฃุฏุงุก ุงูููุงุฏ
    elements.append(Paragraph("<b>ุงูุฃุฏุงุก ุญุณุจ ุงููุงุฏุฉ:</b>", styles['Heading2Right']))
    elements.append(Spacer(1, 0.1 * inch))
    
    # ุฅุนุฏุงุฏ ุจูุงูุงุช ุงูุฌุฏูู
    subject_data_table = [
        [
            Paragraph("<b>ุฉุฏุงููุง</b>", styles['SmallRight']),
            Paragraph("<b>ููุงูุฌูุงุง ุชุงููููุชูุง ุฏุฏุน</b>", styles['SmallRight']),
            Paragraph("<b>ุฉุฒุฌูููุง ุชุงููููุชูุง ุฏุฏุน</b>", styles['SmallRight']),
            Paragraph("<b>ุฉููุจุชููุง ุชุงููููุชูุง ุฏุฏุน</b>", styles['SmallRight']),
        ]
    ]
    
    subject_cols = [col.split('_')[0] for col in student_data.index if col.endswith('_total') and col not in ['Overall_total']]
    
    for subj in subject_cols:
        solved = student_data.get(f"{subj}_solved", 0)
        total = student_data.get(f"{subj}_total", 0)
        pending = total - solved
        
        subject_data_table.append([
            Paragraph(subj, styles['SmallRight']),
            Paragraph(str(total), styles['SmallRight']),
            Paragraph(str(solved), styles['SmallRight']),
            Paragraph(str(pending), styles['SmallRight']),
        ])
        
    # ุชูุณูู ุงูุฌุฏูู
    table_style = TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('BACKGROUND', (0, 0), (-1, 0), colors.Color(red=(0x80/255), green=0, blue=(0x20/255), alpha=0.1)), # ุฎูููุฉ ุนูุงุจูุฉ ูุงุชุญุฉ
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('LEFTPADDING', (0,0), (-1,-1), 5),
        ('RIGHTPADDING', (0,0), (-1,-1), 5),
    ])
    
    subj_table = Table(subject_data_table, colWidths=[doc.width/4]*4)
    subj_table.setStyle(table_style)
    elements.append(subj_table)
    elements.append(Spacer(1, 0.2 * inch))
    
    # 4. ุงูุฅุญุตุงุฆูุงุช ุงูุนุงูุฉ
    elements.append(Paragraph("<b>:ุชุงูุฆุงุตุญูุงุง</b>", styles['Heading2Right']))
    elements.append(Spacer(1, 0.1 * inch))
    
    overall_solved = student_data['Overall_solved']
    overall_total = student_data['Overall_total']
    overall_completion = student_data['ูุณุจุฉ ุงูุฅูุฌุงุฒ %']
    overall_pending = overall_total - overall_solved
    
    stats_data = [
        [
            Paragraph(f"<b>ุฉุจุณู ูุญ ุชุงููููุชูุง</b> {overall_completion:.2f}%", styles['RightAlign']),
            Paragraph(f"<b>ููุจุชู</b> {overall_pending}", styles['RightAlign']),
            Paragraph(f"<b>ุฒุฌูู</b> {overall_solved}", styles['RightAlign']),
        ]
    ]
    stats_table = Table(stats_data, colWidths=[doc.width/3]*3)
    stats_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'RIGHT'),
    ]))
    elements.append(stats_table)
    elements.append(Spacer(1, 0.2 * inch))
    
    # 5. ุงูุชูุตูุฉ (ููุณู ุงููุดุงุฑูุน)
    elements.append(Paragraph("<b>:ุนูุฑุงุดููุง ูุณูู ุฉูุตูุช</b>", styles['Heading2Right']))
    elements.append(Spacer(1, 0.1 * inch))
    
    final_recommendation = custom_recommendation if custom_recommendation else student_data['ุชูุตูุฉ ุงูุทุงูุจ']
    
    # ุงุณุชุฎุฏุงู ููุท ุงูููุฑุฉ ููุชูุตูุฉ
    elements.append(Paragraph(final_recommendation, styles['RightAlign']))
    elements.append(Spacer(1, 0.5 * inch))
    
    # 6. ุงูุชูููุนุงุช (Footer/Contact)
    elements.append(Paragraph("<b>ููุชูุงุตู ูุงูุชูููุนุงุช:</b>", styles['Heading2Right']))
    elements.append(Spacer(1, 0.1 * inch))
    
    contact_data = [
        [
            Paragraph(f"<b>ูุฏูุฑ ุงููุฏุฑุณุฉ:</b> {principal}", styles['SmallRight']),
            Paragraph(f"<b>ุงููุงุฆุจ ุงูุฅุฏุงุฑู:</b> {administrative_deputy}", styles['SmallRight']),
            Paragraph(f"<b>ุงููุงุฆุจ ุงูุฃูุงุฏููู:</b> {academic_deputy}", styles['SmallRight']),
            Paragraph(f"<b>ููุณู ุงููุดุงุฑูุน ุงูุฅููุชุฑูููุฉ:</b> {coordinator}", styles['SmallRight']),
        ]
    ]
    contact_table = Table(contact_data, colWidths=[doc.width/4]*4)
    contact_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'RIGHT'),
    ]))
    elements.append(contact_table)
    elements.append(Spacer(1, 0.2 * inch))
    
    # 7. ุงูุฑุคูุฉ ูุงูุฑูุงุจุท
    elements.append(Paragraph("<b>ุฑุคูุชูุง: ูุชุนูู ุฑูุงุฏู ูุชูููุฉ ูุณุชุฏุงูุฉ</b>", styles['Heading2Right']))
    elements.append(Spacer(1, 0.1 * inch))
    
    links_data = [
        [
            Paragraph("<b>ุฑุงุจุท ูุธุงู ูุทุฑ:</b> https://qeducation.edu.gov.qa", styles['SmallRight']),
            Paragraph("<b>ูููุน ุงุณุชุนุงุฏุฉ ูููุฉ ุงููุฑูุฑ:</b> https://pwdreset.edu.gov.qa", styles['SmallRight']),
        ]
    ]
    links_table = Table(links_data, colWidths=[doc.width/2]*2)
    links_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'RIGHT'),
    ]))
    elements.append(links_table)
    
    # ุจูุงุก ุงููุณุชูุฏ
    doc.build(elements)
    mem.seek(0)
    return mem
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# ุฏุงูุฉ ุฅูุดุงุก ุงูุชูุฑูุฑ ุงูููู ุงููุตูู (Excel)
# ----------------------------------------------------------------------
def create_quantitative_report_excel(summary_df: pd.DataFrame, subjects: List[str]) -> BytesIO:
    """ุชูุดุฆ ุชูุฑูุฑ Excel ููู ูุตูู ุนูู ูุณุชูู ุงููุงุฏุฉ ูุงูุดุนุจุฉ."""
    mem = BytesIO()
    with pd.ExcelWriter(mem, engine="openpyxl") as w:
        
        # 1. ุชูุฑูุฑ ุงูุฃุฏุงุก ุญุณุจ ุงููุงุฏุฉ
        subject_performance = []
        for subj in subjects:
            total_solved = summary_df.get(f"{subj}_solved", pd.Series([0])).sum()
            total_total = summary_df.get(f"{subj}_total", pd.Series([0])).sum()
            avg_completion = (total_solved / total_total * 100) if total_total > 0 else 0
            
            # ุงูุญุตูู ุนูู ุงูุชูุตูุฉ ุงูุซุงุจุชุฉ ูููุงุฏุฉ
            recommendation = analyze_subject_patterns(summary_df, subj)
            
            subject_performance.append({
                "ุงููุงุฏุฉ": subj,
                "ุฅุฌูุงูู ุงูููุฌุฒ": total_solved,
                "ุฅุฌูุงูู ุงูุชููููุงุช": total_total,
                "ูุชูุณุท ุงูุฅูุฌุงุฒ %": f"{avg_completion:.2f}%",
                "ุงูุชูุตูุฉ ุงูุชุดุบูููุฉ": recommendation
            })
        
        df_subj = pd.DataFrame(subject_performance)
        df_subj.to_excel(w, sheet_name="ููุฎุต ุงูุฃุฏุงุก ุญุณุจ ุงููุงุฏุฉ", index=False)
        
        # 2. ุชูุฑูุฑ ุงูุฃุฏุงุก ุญุณุจ ุงูุดุนุจุฉ ูุงููุงุฏุฉ
        report_data = []
        for (class_name, section), group in summary_df.groupby(["ุงูุตู", "ุงูุดุนุจุฉ"]):
            for subj in subjects:
                total_solved = group.get(f"{subj}_solved", pd.Series([0])).sum()
                total_total = group.get(f"{subj}_total", pd.Series([0])).sum()
                avg_completion = (total_solved / total_total * 100) if total_total > 0 else 0
                
                report_data.append({
                    "ุงูุตู": class_name,
                    "ุงูุดุนุจุฉ": section,
                    "ุงููุงุฏุฉ": subj,
                    "ุฅุฌูุงูู ุงูููุฌุฒ": total_solved,
                    "ุฅุฌูุงูู ุงูุชููููุงุช": total_total,
                    "ูุชูุณุท ุงูุฅูุฌุงุฒ %": f"{avg_completion:.2f}%"
                })
        
        df_class_subj = pd.DataFrame(report_data)
        df_class_subj.to_excel(w, sheet_name="ุงูุฃุฏุงุก ุญุณุจ ุงูุดุนุจุฉ ูุงููุงุฏุฉ", index=False)
        
    mem.seek(0)
    return mem
# ----------------------------------------------------------------------

def send_teacher_emails(summary_df: pd.DataFrame, inactive_threshold: float):
    """ุชูููุฏ ุชูุจููุงุช ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูููุนูููู ุญูู ุงูุทูุงุจ ุบูุฑ ุงููุงุนููู."""
    if 'teacher_email' not in summary_df.columns:
        st.error("ูุง ูููู ุฅุฑุณุงู ุงูุฅููููุงุช. ูุฑุฌู ุงูุชุฃูุฏ ูู ุชุญููู ููู ุงููุนูููู ูุฑุจุทู ุจุจูุงูุงุช ุงูุทูุงุจ.")
        return
    
    # ุชุญุฏูุฏ ุงูุทูุงุจ ุบูุฑ ุงููุงุนููู
    inactive_students = summary_df[summary_df['ูุณุจุฉ ุงูุฅูุฌุงุฒ %'] <= inactive_threshold]
    
    if inactive_students.empty:
        st.success("ูุง ููุฌุฏ ุทูุงุจ ุบูุฑ ูุงุนููู (ุฃูู ูู ุงูุญุฏ ุงููุญุฏุฏ).")
        return
        
    # ุชุฌููุน ุญุณุจ ุงููุนููุฉ
    email_groups = inactive_students.groupby(['teacher_email', 'teacher_name'])
    
    st.info(f"ุชู ุชุญุฏูุฏ {inactive_students.shape[0]} ุทุงูุจ ุบูุฑ ูุงุนู ุณูุชู ุฅุฑุณุงู ุชูุจููุงุช ุจุดุฃููู ุฅูู {len(email_groups)} ูุนููุฉ.")
    
    for (email, name), group in email_groups:
        student_list = "\n".join([f"- {row['ุงุณู ุงูุทุงูุจ']} ({row['ุงูุตู']}/{row['ุงูุดุนุจุฉ']})" for _, row in group.iterrows()])
        
        # ุงูุชูุตูุฉ ุงูุฌูุงุนูุฉ ููุทูุงุจ ุบูุฑ ุงููุงุนููู
        recommendation = STUDENT_RECOMMENDATIONS["๐ซ Not Utilizing System"]
        
        email_body = f"""
        ุนุฒูุฒุชู ุงููุนููุฉ/ {name}ุ
        
        ุชุญูุฉ ุทูุจุฉ ูุจุนุฏุ
        
        ููุฏ ุชูุจููู ุจูุฌูุฏ ูุฌููุนุฉ ูู ุงูุทูุงุจ ูู ุตูููู ูู ุชุธูุฑ ุจุนุฏ ุงุณุชูุงุฏุฉ ูุงููุฉ ูู ูุธุงู ูุทุฑ ููุชุนูููุ ุญูุซ ุฃู ูุณุจุฉ ุฅูุฌุงุฒูู ุฃูู ูู {inactive_threshold}%.
        
        **ูุงุฆูุฉ ุงูุทูุงุจ ุบูุฑ ุงููุงุนููู:**
        {student_list}
        
        **ุงูุชูุตูุฉ ุงูุชุดุบูููุฉ:**
        {recommendation}
        
        ูุฑุฌู ุงูุชูุงุตู ูุน ูุคูุงุก ุงูุทูุงุจ ูุญุซูู ุนูู ุชูุนูู ุงููุธุงู ูุงููุดุงุฑูุฉ ุงููุดุทุฉ.
        
        ูุน ุฎุงูุต ุงูุดูุฑ ูุงูุชูุฏูุฑุ
        ูุฑูู ุฃู ุฅูุฌุงุฒ
        """
        
        # ููุง ูุชู ุฅุฑุณุงู ุงูุฅูููู ุงููุนูู (ูุฌุจ ุฅุถุงูุฉ ููุฏ SMTP ููุง)
        # ูุซุงู:
        # send_mail(to=email, subject="ุชูุจูู: ุทูุงุจ ุบูุฑ ูุงุนููู ูู ูุธุงู ูุทุฑ ููุชุนููู", body=email_body)
        
        st.write(f"ุชู ุชูููุฏ ุชูุจูู ูููุนููุฉ {name} ({email}) ูู {group.shape[0]} ุทุงูุจ.")

# ---------- Streamlit App ----------
def main():
    
    # 1. ุนุฑุถ ุฑุฃุณ ุงูุตูุญุฉ (ุงูุดุนุงุฑุงุช ูุงูุนููุงู)
    display_header()
    
    # 2. ุฅุนุฏุงุฏุงุช ุงูุดุฑูุท ุงูุฌุงูุจู
    st.sidebar.header("โ๏ธ ุฅุนุฏุงุฏุงุช ุงููุธุงู")
    
    # ูุงุฌูุฉ ุฅุฏุฎุงู ุจูุงูุงุช ุงููุฏุฑุณุฉ ูุงููุณุคูููู
    with st.sidebar.expander("๐ซ ุจูุงูุงุช ุงููุฏุฑุณุฉ ูุงููุณุคูููู", expanded=True):
        st.session_state.school_info = {
            "School_Name": st.text_input("ุงุณู ุงููุฏุฑุณุฉ", "ูุฏุฑุณุฉ ุนุซูุงู ุจู ุนูุงู ุงููููุฐุฌูุฉ"),
            "Coordinator": st.text_input("ููุณู ุงููุดุงุฑูุน ุงูุฅููุชุฑูููุฉ", "ุณุญุฑ ุนุซูุงู"),
            "Academic_Deputy": st.text_input("ุงููุงุฆุจ ุงูุฃูุงุฏููู", "ูุฑูู ุงููุถุน"),
            "Administrative_Deputy": st.text_input("ุงููุงุฆุจ ุงูุฅุฏุงุฑู", "ุฏูุงู ุงููููุฏุฉ"),
            "Principal": st.text_input("ูุฏูุฑ ุงููุฏุฑุณุฉ", "ูููุฑุฉ ุงููุงุฌุฑู"),
        }
    
    # ุฅุนุฏุงุฏุงุช ุงููุธุงู ููุนุงููุฑ ุงูุชุตููู
    with st.sidebar.expander("๐ ูุนุงููุฑ ุงูุชุตููู", expanded=False):
        st.session_state.thresholds = {
            "Platinum": st.number_input("ุญุฏ Platinum (%) (ุฃูุจุฑ ูู)", 0, 100, 89),
            "Gold": st.number_input("ุญุฏ Gold (%) (ุฃูุจุฑ ูู)", 0, 100, 79),
            "Silver": st.number_input("ุญุฏ Silver (%) (ุฃูุจุฑ ูู)", 0, 100, 49),
            "Bronze": st.number_input("ุญุฏ Bronze (%) (ุฃูุจุฑ ูู)", 0, 100, 0)
        }
        inactive_threshold = st.number_input("ุญุฏ ุงูุทูุงุจ ุบูุฑ ุงููุงุนููู (%) (ุฃูู ูู ุฃู ูุณุงูู)", 0, 100, 10)
    
    # 3. ุชุญููู ูููุงุช ุงููุนูููู
    teacher_file = st.sidebar.file_uploader("๐ ุชุญููู ููู ุจูุงูุงุช ุงููุนูููู (ูุฅุฑุณุงู ุงูุฅููููุงุช)", type=["xlsx", "csv", "xls"])
    teachers_df = _load_teachers_df(teacher_file)
    
    # 4. ุชุญููู ูููุงุช ุงูุชููููุงุช
    st.sidebar.header("๐ ุชุญููู ุจูุงูุงุช ุงูุชููููุงุช")
    date_filter = st.sidebar.date_input("ููุชุฑ ุงูุชุงุฑูุฎ (ุชุงุฑูุฎ ุจุฏุงูุฉ ุงูุฅูุฌุงุฒ)", pd.to_datetime("today") - pd.Timedelta(days=30))
    uploaded_files = st.sidebar.file_uploader("ุชุญููู ูููุงุช ุงูุชููููุงุช (Excel)", type=["xlsx", "xls"], accept_multiple_files=True)
    
    # 5. ูุนุงูุฌุฉ ุงูุจูุงูุงุช
    if uploaded_files:
        all_rows = []
        for file in uploaded_files:
            try:
                xls = pd.ExcelFile(file)
                selected_sheets = st.sidebar.multiselect(f"ุงุฎุชุฑ ุฃูุฑุงู ูู {file.name}", xls.sheet_names, default=xls.sheet_names)
                
                # ุงููุนุงูุฌุฉ ุงููุนููุฉ
                rows = process_excel_file(file, file.name, start_row_students=1, selected_sheets=selected_sheets)
                all_rows.extend(rows)
                
            except Exception as e:
                st.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูููู {file.name}: {e}")
                
        if all_rows:
            raw_df = pd.DataFrame(all_rows)
            raw_df = ensure_uid(raw_df)
            
            # ุชุทุจูู ููุชุฑ ุงูุชุงุฑูุฎ (ุงูุชุฑุงุถูุงูุ ูุง ููุฌุฏ ุนููุฏ ุชุงุฑูุฎุ ูุฐุง ุณููุชุฑุถ ุฃู ุงูููุชุฑ ูุทุจู ูุฏููุงู)
            # if 'date_column' in raw_df.columns:
            #     raw_df = raw_df[pd.to_datetime(raw_df['date_column']) >= date_filter]
                
            summary_df, subjects = build_summary_pivot(raw_df, st.session_state.thresholds)
            
            # ุฑุจุท ุจูุงูุงุช ุงููุนูููู
            if teachers_df is not None and not teachers_df.empty:
                summary_df['class_section'] = summary_df['ุงูุตู'].astype(str) + ' ' + summary_df['ุงูุดุนุจุฉ'].astype(str)
                summary_df = pd.merge(summary_df, teachers_df, on='class_section', how='left')
                summary_df.drop(columns=['class_section'], inplace=True)
            
            st.session_state.summary_df = summary_df
            st.session_state.subjects = subjects
            st.session_state.raw_df = raw_df
            
            st.success(f"ุชูุช ูุนุงูุฌุฉ {summary_df.shape[0]} ุทุงูุจ. ุฅุฌูุงูู ุงูููุงุฏ: {len(subjects)}")
            
            # 6. ุนุฑุถ ุฌุฏูู ุงูููุฎุต
            st.header("ุฌุฏูู ููุฎุต ุฅูุฌุงุฒ ุงูุทูุงุจ")
            st.dataframe(summary_df)
            
            # 7. ุงูุชูุตูุงุช ุนูู ูุณุชูู ุงููุงุฏุฉ
            st.header("ุชุญููู ุงูุฃููุงุท ูุงูุชูุตูุงุช ุนูู ูุณุชูู ุงููุงุฏุฉ")
            for subj in subjects:
                with st.expander(f"ุชูุตูุฉ ุงููุงุฏุฉ: {subj}"):
                    st.info(analyze_subject_patterns(summary_df, subj))
            
            # 8. ุงูุฑุณูู ุงูุจูุงููุฉ ุงูุชูุงุนููุฉ
            st.header("๐ ุงูุฑุณูู ุงูุจูุงููุฉ ุงูุชูุงุนููุฉ")
            
            # ุฑุณู ุจูุงูู 1: ุญุณุจ ุงููุงุฏุฉ
            st.subheader("ุชุญููู ุงูุฃุฏุงุก ุญุณุจ ุงููุงุฏุฉ")
            subject_chart = create_subject_performance_chart(summary_df, subjects)
            st.plotly_chart(subject_chart, use_container_width=True)
            
            # ุฑุณู ุจูุงูู 2: ุญุณุจ ุงูุดุนุจุฉ
            st.subheader("ุชุญููู ุงูุฃุฏุงุก ุญุณุจ ุงูุดุนุจุฉ")
            class_chart = create_class_section_performance_chart(summary_df)
            st.plotly_chart(class_chart, use_container_width=True)
            
            # 9. ุชูุงุฑูุฑ ุงูุทูุงุจ ุงููุฑุฏูุฉ (PDF)
            st.header("๐ ุชูุงุฑูุฑ ุงูุทูุงุจ ุงููุฑุฏูุฉ")
            if not summary_df.empty:
                student_names = summary_df["ุงุณู ุงูุทุงูุจ"].tolist()
                selected_student = st.selectbox("ุงุฎุชุฑ ุทุงูุจูุง ูุฅูุดุงุก ุชูุฑูุฑ ูุฑุฏู:", student_names)
                
                if selected_student:
                    student_data = summary_df[summary_df["ุงุณู ุงูุทุงูุจ"] == selected_student].iloc[0]
                    
                    # ุฎูุงุฑ ุงูุชูุตูุฉ ุงููุฎุตุตุฉ
                    custom_rec = st.text_area(
                        "ุชูุตูุฉ ููุณู ุงููุดุงุฑูุน (ุงุฎุชูุงุฑูุ ุงุชุฑููุง ูุงุฑุบุฉ ูุงุณุชุฎุฏุงู ุงูุชูุตูุฉ ุงูุชููุงุฆูุฉ):",
                        value="",
                        height=100
                    )
                    
                    # ุฅูุดุงุก ุงูุชูุฑูุฑ ุงููุฑุฏู
                    pdf_output = create_student_report_pdf(student_data, raw_df, st.session_state.school_info, custom_rec)
                    
                    st.download_button(
                        label=f"โฌ๏ธ ุชุญููู ุชูุฑูุฑ {selected_student} (PDF)",
                        data=pdf_output,
                        file_name=f"ุชูุฑูุฑ_ุฅูุฌุงุฒ_{selected_student}.pdf",
                        mime="application/pdf"
                    )
                    
                # ุฒุฑ ุชุญููู ุฌููุน ุงูุชูุงุฑูุฑ (ZIP)
                if st.button("โฌ๏ธ ุชุญููู ุฌููุน ุงูุชูุงุฑูุฑ ุงููุฑุฏูุฉ (ZIP)"):
                    with st.spinner("ุฌุงุฑู ุชุฌููุน ุฌููุน ุงูุชูุงุฑูุฑ ุงููุฑุฏูุฉ..."):
                        zip_buffer = BytesIO()
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED, False) as zip_file:
                            for index, row in summary_df.iterrows():
                                pdf_data = create_student_report_pdf(row, raw_df, st.session_state.school_info)
                                zip_file.writestr(f"ุชูุฑูุฑ_ุฅูุฌุงุฒ_{row['ุงุณู ุงูุทุงูุจ']}.pdf", pdf_data.getvalue())
                        
                        st.download_button(
                            label="ุชุญููู ููู ZIP ูุฌููุน ุงูุชูุงุฑูุฑ",
                            data=zip_buffer.getvalue(),
                            file_name="ุฌููุน_ุชูุงุฑูุฑ_ุงูุฅูุฌุงุฒ_ุงููุฑุฏูุฉ.zip",
                            mime="application/zip"
                        )

            # 10. ุงูุชูุฑูุฑ ุงูููู ุงููุตูู (Excel)
            st.header("๐ ุงูุชูุฑูุฑ ุงูููู ุงููุตูู")
            quantitative_excel = create_quantitative_report_excel(summary_df, subjects)
            
            st.download_button(
                label="โฌ๏ธ ุชุญููู ุงูุชูุฑูุฑ ุงูููู ุงููุตูู (Excel)",
                data=quantitative_excel,
                file_name="ุงูุชูุฑูุฑ_ุงูููู_ุงููุตูู_ููุฅูุฌุงุฒ.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            
            # 11. ุฎูุงุฑุงุช ุงูุชุตุฏูุฑ ูุงูุฅูููู
            st.header("ุฅุฌุฑุงุกุงุช ุฅุถุงููุฉ")
            col_export, col_email = st.columns(2)
            
            with col_export:
                # ุชุตุฏูุฑ Excel
                excel_data = to_excel_bytes({"ููุฎุต ุงูุฅูุฌุงุฒ": summary_df})
                st.download_button(
                    label="โฌ๏ธ ุชุตุฏูุฑ ููุฎุต ุงูุฅูุฌุงุฒ (Excel)",
                    data=excel_data,
                    file_name="ููุฎุต_ุฅูุฌุงุฒ_ุงูุทูุงุจ_ุงููุญุฏุซ.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            
            with col_email:
                # ุฅุฑุณุงู ุงูุฅููููุงุช
                if st.button("๐ง ุฅุฑุณุงู ุชูุจููุงุช ุงูุทูุงุจ ุบูุฑ ุงููุงุนููู ูููุนูููู"):
                    send_teacher_emails(summary_df, inactive_threshold)
                    st.success("ุชู ุงูุงูุชูุงุก ูู ุนูููุฉ ุชูููุฏ ุงูุชูุจููุงุช.")
        else:
            st.warning("ูู ูุชู ุงูุนุซูุฑ ุนูู ุจูุงูุงุช ุตุงูุญุฉ ูููุนุงูุฌุฉ.")
    else:
        st.info("ุงูุฑุฌุงุก ุชุญููู ูููุงุช ุงูุชููููุงุช ููุจุฏุก ุจุงูุชุญููู.")
    
    st.markdown(FOOTER_MARKDOWN, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
